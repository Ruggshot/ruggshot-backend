# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Customer {
  id: Int!
  name: String!
  organizations: [Organization!]
}

type Category {
  id: Int!
  category_name: String!
  description: String
  image: String
  active: Boolean!
  features: [Feature!]
  events: [Event!]
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Option {
  id: Int!
  option_name: String!
  active: Boolean!
  beafs: [Beaf!]!
  parent_feat_id: Int!
  features: [Feature!]!
}

type Feature {
  id: Int!
  feature_name: String!
  active: Boolean!
  parent_cat_id: Int!
  categories: [Category!]!
  options: [Option!]
  beafs: [Beaf!]!
}

type Gallery {
  id: Int!
  active: Boolean!
  organization: Organization!
  beafs: [Beaf!]!
}

type Image {
  id: Int!
  spotInLine: Int
  location: String
  link: String!
  beafs: [Beaf!]!
  event: Event!
}

type Story {
  id: Int!
  beaf: Beaf!
  story_description: String!
}

type Beaf {
  id: Int!
  description: String
  isCompleted: Boolean!
  gallery: Gallery
  stories: [Story!]
  images: [Image!]
  event: Event
  eventId: Float
  feature: Feature
  featureId: Int
  options: [Option!]
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

type User {
  id: Int!
  name: String!
  phone_number: String!
  password: String
  orgVerified: Boolean!
  numberVerified: Boolean!
  organizations: [Organization!]!
  events: [Event!]
  activeOrganization: Int
  createdAt: Timestamp!
}

type Event {
  id: Int!
  first_name: String!
  last_name: String!
  zip_code: Int!
  city: String!
  phone_number: String!
  status: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  beafs: [Beaf!]!
  images: [Image!]!
  user: User!
  userId: Int
  organization: Organization!
  organizationId: Int!
  category: Category!
  categoryId: Int!
}

type Organization {
  id: Int!
  name: String!
  customer: Customer!
  users: [User!]!
  galleries: [Gallery!]!
  events: [Event!]!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Admin {
  id: Int!
  name: String!
  email: String!
  phone_number: String
  password: String!
  createdAt: Timestamp!
}

type AdminLoginResponse {
  access_token: String!
  admin: Admin!
}

type Query {
  allEvents(orderBy: String, skip: Float, take: Float, status: String, zipCode: String, firstName: String, lastName: String, categoryId: Float): [Event!]!
  findEventById(eventId: Float!): Event!
  allOrganizations: [Organization!]!
  organization(id: Int!): Organization!
  allCustomers: [Customer!]!
  allUsers: [User!]!
  findUserById: User!
  findUserByNumber: User!
  allGalleries: [Gallery!]!
  allBeafs: [Beaf!]!
  findBeafById(beafId: Float!): Beaf!
  getEventBeafs(eventId: Float!): [Beaf!]!
  allStories: [Story!]!
  allImages: [Image!]!
  findCategoryById(id: Int!): Category!
  allCategories: [Category!]!
  allAssignedCategories: [Category!]!
  findOptionByID(id: Int!): Option!
  allOptions: [Option!]!
  allOptionsWhereParent(id: Int!): [Option!]!
  verifyUserExists(phone_number: String!): User!
  verifyOTP(otp: Float!, userId: Float!): Boolean!
  sendOrgOTP(phone_number: String!): Boolean!
  verifyOrgOTP(otp: Float!, phoneNumber: String!): Boolean!
  isAuthorized: Boolean!
  findFeatureById(id: Int!): Feature!
  allFeatures: [Feature!]!
  allFeaturesWhereParent(id: Int!): [Feature!]!
}

type Mutation {
  createEvent(data: CreateEventInput!): Event!
  updateEvent(eventId: Float!, eventStatus: String, firstName: String, lastName: String, zipCode: String, phoneNumber: String, categoryId: Float): Event!
  createOrganization(data: CreateOrganizationInput!, customerId: Float!, users: Float!): Organization!
  createCustomer(data: CreateCustomerInput!): Customer!
  updateUser(userId: Float!, updateUserInput: UpdateUserInput!): User!
  createGallery(organizationId: Float!): Gallery!
  createBeaf(eventId: Float!): Beaf!
  updateBeaf(beafId: Float!, input: BeafUpdateInputDto!): Beaf!
  updateBeafFeature(beafId: Float!, input: BeafUpdateInputDto!): Beaf!
  createStory(data: CreateStoryInput!, beafId: Float!): Story!
  singleUpload(file: Upload!, eventId: Int!, beafIndex: Int!, spotInLine: Int!): Boolean!
  createCategory(data: CreateCategoryInput!): Category!
  createOption(data: CreateOptionInput!): Option!
  loginUser(loginUserInput: LoginUserInput!): LoginResponse!
  loginAdmin(adminLoginInput: AdminLoginInput!): AdminLoginResponse!
  signup(createUserInput: CreateUserInput!, organizationId: Float!, anotherOrgId: Float!): User!
  createFeature(data: CreateFeatureInput!): Feature!
}

input CreateEventInput {
  first_name: String!
  last_name: String!
  zip_code: Int!
  city: String!
  phone_number: String!
  categoryId: Int!
}

input CreateOrganizationInput {
  name: String!
}

input CreateCustomerInput {
  name: String!
}

input UpdateUserInput {
  name: String
  phone_number: String
  password: String!
  activeOrganization: Int
}

input BeafUpdateInputDto {
  featureId: Int
  options: [Int!]
  description: String
}

input CreateStoryInput {
  story_description: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCategoryInput {
  category_name: String!
  description: String
  image: String
}

input CreateOptionInput {
  option_name: String!
  parent_feat_id: Int!
}

input LoginUserInput {
  phone_number: String!
  password: String!
}

input AdminLoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  phone_number: String!
  password: String
  activeOrganization: Int
}

input CreateFeatureInput {
  feature_name: String!
  parent_cat_id: Int!
}
